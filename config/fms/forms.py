from django import forms
from .models import FlightEvaluation, FlightLog

class FlightEvaluationForm(forms.ModelForm):
    class Meta:
        model = FlightEvaluation
        fields = [
            'instructor_id', 'instructor_first_name', 'instructor_last_name',
            'instructor_license_type', 'instructor_license_number',
            'student_id', 'student_first_name', 'student_last_name',
            'student_license_type', 'course_type',
            'flight_rules', 'solo_flight', 'session_number', 'session_letter',
            'accumulated_flight_hours', 'session_flight_hours', 'aircraft_registration', 'session_grade',
            'pre_1', 'pre_2', 'pre_3', 'pre_4', 'pre_5',
            'to_1', 'to_2', 'to_3', 'to_4', 'to_5', 'to_6',
            'mvrs_1', 'mvrs_2', 'mvrs_3', 'mvrs_4', 'mvrs_5', 'mvrs_6', 'mvrs_7', 'mvrs_8',
            'mvrs_9', 'mvrs_10', 'mvrs_11', 'mvrs_12', 'mvrs_13', 'mvrs_14', 'mvrs_15', 'mvrs_16', 'mvrs_17',
            'emer_1', 'emer_2', 'emer_3', 'emer_4', 'emer_5',
            'nav_1', 'nav_2', 'nav_3', 'nav_4', 'nav_5', 'nav_6', 'nav_7', 'nav_8', 'nav_9',
            'gen_1', 'gen_2', 'gen_3', 'gen_4', 'gen_5', 'gen_6', 'gen_7',
            'inst_1','inst_2', 'inst_3', 'inst_4', 'inst_5', 'inst_6',
            'inst_7', 'inst_8', 'inst_9', 'inst_10', 'inst_11', 'inst_12',
            'land_1', 'land_2', 'land_3', 'land_4', 'land_5', 'land_6', 'land_7', 'land_8',
            'land_9', 'land_10', 'land_11', 'land_12', 'land_13', 'land_14', 'land_15',
            'notes',
        ]

        labels = {
            'instructor_id': 'Número de cédula',
            'instructor_first_name': 'Nombre',
            'instructor_last_name': 'Apellido',
            'instructor_license_type': 'Tipo de licencia',
            'instructor_license_number': 'Número de licencia',
            'student_id': 'Número de cédula',
            'student_first_name': 'Nombre',
            'student_last_name': 'Apellido',
            'student_license_type': 'Tipo de licencia',
            'course_type': 'Curso',
            'flight_rules': 'Reglas de vuelo',
            'solo_flight': 'Vuelo solo',
            'session_number': 'Número de sesión',
            'session_letter': 'Repetición de la sesión',
            'accumulated_flight_hours': 'Horas de vuelo acumuladas',
            'session_flight_hours': 'Horas de vuelo de la sesión',
            'aircraft_registration': 'Registro de la aeronave',
            'session_grade': 'Calificación de la sesión',
            'pre_1': 'Inspección pre-vuelo',
            'pre_2': 'Uso de checklist',
            'pre_3': 'Comunicaciones',
            'pre_4': 'Técnica de rodaje',
            'pre_5': 'Repaso de seguridad operacional',
            'to_1': 'Normal',
            'to_2': 'Viento cruzado',
            'to_3': 'Pista corta y/o suave',
            'to_4': 'Ascenso',
            'to_5': 'Comunicación',
            'to_6': 'Ejecución SID',
            'mvrs_1': 'Uso de compensadores',
            'mvrs_2': 'Técnica de nivelado',
            'mvrs_3': 'Vuelto recto nivelado',
            'mvrs_4': 'Virajes de 20 y 30',
            'mvrs_5': 'Virajes ascenso/descenso',
            'mvrs_6': 'Virajes escarpados',
            'mvrs_7': 'Vuelo lento',
            'mvrs_8': 'Pérdida sin potencia',
            'mvrs_9': 'Pérdida config. despegue',
            'mvrs_10': 'Pérdida config. aterrizaje',
            'mvrs_11': 'Pérdida acelerada',
            'mvrs_12': 'Maniobra referencia tierra',
            'mvrs_13': 'Maniobra referencia aire',
            'mvrs_14': 'Descenso C/S potencia',
            'mvrs_15': 'Descenso en planeo',
            'mvrs_16': 'Descenso rata constante',
            'mvrs_17': 'Orientación geográfica',
            'emer_1': 'Actitud y juicio',
            'emer_2': 'Procedimientos',
            'emer_3': 'Reconocimiento de actitud inusual',
            'emer_4': 'Recuperación',
            'emer_5': 'Panel parcial',
            'nav_1': 'Plan de vuelo operacional',
            'nav_2': 'Datos de vuelo - METAR, TAFOR, CARTAS, COM',
            'nav_3': 'Llenado plan de vuelo',
            'nav_4': 'Reportes de ruta',
            'nav_5': 'Orientación / Consciencia situacional',
            'nav_6': 'Uso de radioayudas',
            'nav_7': 'Uso de tablas de performance',
            'nav_8': 'Preparación de cartas',
            'nav_9': 'Cálculos TOC / TOD',
            'gen_1': 'Juicio y citerio',
            'gen_2': 'Seguridad de vuelo',
            'gen_3': 'Disciplina',
            'gen_4': 'Técnica',
            'gen_5': 'Conocimiento general de la aeronave',
            'gen_6': 'Conocimiento RAV',
            'gen_7': 'Planificación general',
            'inst_1': 'Maniobra SA SC',
            'inst_2': 'Virajes cronometrados',
            'inst_3': 'Patrón de juego',
            'inst_4': 'Recuperación de posición inadecuada',
            'inst_5': 'Virajes estándar',
            'inst_6': 'Cambios de velocidad',
            'inst_7': 'Intercepción de radiales',
            'inst_8': 'Patrones de espera',
            'inst_9': 'Navegación directa WP',
            'inst_10': 'Uso OBI, RMI, HSI',
            'inst_11': 'Chequeo cruzado',
            'inst_12': 'Virajes reversión curso',
            'land_1': 'Comunicación',
            'land_2': 'Planeo',
            'land_3': 'Patrón de tránsito',
            'land_4': 'Derrape',
            'land_5': 'Configuración',
            'land_6': 'Aterrizaje normal',
            'land_7': 'Aterrizaje corto/suave',
            'land_8': 'Aproximación frustrada',
            'land_9': 'Aproximación de precisión',
            'land_10': 'Toque y despegue',
            'land_11': 'Lectura de cartas',
            'land_12': 'Ejecución de procedimiento',
            'land_13': 'Dominio de instrumentos',
            'land_14': 'Procedimiento IAF - IF - FAF',
            'land_15': 'Patrón de espera',
            'notes': 'Notas',
        }

        widgets = {
            'instructor_id': forms.NumberInput(attrs={'class': 'form-field'}),
            'instructor_first_name': forms.TextInput(attrs={'class': 'form-field'}),
            'instructor_last_name': forms.TextInput(attrs={'class': 'form-field'}),
            'instructor_license_type': forms.Select(attrs={'class': 'form-field'}),
            'instructor_license_number': forms.NumberInput(attrs={'class': 'form-field'}),
            'student_id': forms.NumberInput(attrs={'class': 'form-field'}),
            'student_first_name': forms.TextInput(attrs={'class': 'form-field'}),
            'student_last_name': forms.TextInput(attrs={'class': 'form-field'}),
            'student_license_type': forms.Select(attrs={'class': 'form-field'}),
            'course_type': forms.Select(attrs={'class': 'form-field'}),
            'flight_rules': forms.Select(attrs={'class': 'form-field'}),
            'solo_flight': forms.Select(attrs={'class': 'form-field'}),
            'session_number': forms.Select(attrs={'class': 'form-field'}),
            'session_letter': forms.Select(attrs={'class': 'form-field'}),
            'accumulated_flight_hours': forms.NumberInput(attrs={'class': 'form-field'}),
            'session_flight_hours': forms.NumberInput(attrs={'class': 'form-field'}),
            'aircraft_registration': forms.Select(attrs={'class': 'form-field'}),
            'session_grade': forms.Select(attrs={'class': 'form-field'}),
            'pre_1': forms.Select(attrs={'class': 'form-field'}),
            'pre_2': forms.Select(attrs={'class': 'form-field'}),
            'pre_3': forms.Select(attrs={'class': 'form-field'}),
            'pre_4': forms.Select(attrs={'class': 'form-field'}),
            'pre_5': forms.Select(attrs={'class': 'form-field'}),
            'to_1': forms.Select(attrs={'class': 'form-field'}),
            'to_2': forms.Select(attrs={'class': 'form-field'}),
            'to_3': forms.Select(attrs={'class': 'form-field'}),
            'to_4': forms.Select(attrs={'class': 'form-field'}),
            'to_5': forms.Select(attrs={'class': 'form-field'}),
            'to_6': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_1': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_2': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_3': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_4': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_5': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_6': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_7': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_8': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_9': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_10': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_11': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_12': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_13': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_14': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_15': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_16': forms.Select(attrs={'class': 'form-field'}),
            'mvrs_17': forms.Select(attrs={'class': 'form-field'}),
            'emer_1': forms.Select(attrs={'class': 'form-field'}),
            'emer_2': forms.Select(attrs={'class': 'form-field'}),
            'emer_3': forms.Select(attrs={'class': 'form-field'}),
            'emer_4': forms.Select(attrs={'class': 'form-field'}),
            'emer_5': forms.Select(attrs={'class': 'form-field'}),
            'nav_1': forms.Select(attrs={'class': 'form-field'}),
            'nav_2': forms.Select(attrs={'class': 'form-field'}),
            'nav_3': forms.Select(attrs={'class': 'form-field'}),
            'nav_4': forms.Select(attrs={'class': 'form-field'}),
            'nav_5': forms.Select(attrs={'class': 'form-field'}),
            'nav_6': forms.Select(attrs={'class': 'form-field'}),
            'nav_7': forms.Select(attrs={'class': 'form-field'}),
            'nav_8': forms.Select(attrs={'class': 'form-field'}),
            'nav_9': forms.Select(attrs={'class': 'form-field'}),
            'gen_1': forms.Select(attrs={'class': 'form-field'}),
            'gen_2': forms.Select(attrs={'class': 'form-field'}),
            'gen_3': forms.Select(attrs={'class': 'form-field'}),
            'gen_4': forms.Select(attrs={'class': 'form-field'}),
            'gen_5': forms.Select(attrs={'class': 'form-field'}),
            'gen_6': forms.Select(attrs={'class': 'form-field'}),
            'gen_7': forms.Select(attrs={'class': 'form-field'}),
            'inst_1': forms.Select(attrs={'class': 'form-field'}),
            'inst_2': forms.Select(attrs={'class': 'form-field'}),
            'inst_3': forms.Select(attrs={'class': 'form-field'}),
            'inst_4': forms.Select(attrs={'class': 'form-field'}),
            'inst_5': forms.Select(attrs={'class': 'form-field'}),
            'inst_6': forms.Select(attrs={'class': 'form-field'}),
            'inst_7': forms.Select(attrs={'class': 'form-field'}),
            'inst_8': forms.Select(attrs={'class': 'form-field'}),
            'inst_9': forms.Select(attrs={'class': 'form-field'}),
            'inst_10': forms.Select(attrs={'class': 'form-field'}),
            'inst_11': forms.Select(attrs={'class': 'form-field'}),
            'inst_12': forms.Select(attrs={'class': 'form-field'}),
            'land_1': forms.Select(attrs={'class': 'form-field'}),
            'land_2': forms.Select(attrs={'class': 'form-field'}),
            'land_3': forms.Select(attrs={'class': 'form-field'}),
            'land_4': forms.Select(attrs={'class': 'form-field'}),
            'land_5': forms.Select(attrs={'class': 'form-field'}),
            'land_6': forms.Select(attrs={'class': 'form-field'}),
            'land_7': forms.Select(attrs={'class': 'form-field'}),
            'land_8': forms.Select(attrs={'class': 'form-field'}),
            'land_9': forms.Select(attrs={'class': 'form-field'}),
            'land_10': forms.Select(attrs={'class': 'form-field'}),
            'land_11': forms.Select(attrs={'class': 'form-field'}),
            'land_12': forms.Select(attrs={'class': 'form-field'}),
            'land_13': forms.Select(attrs={'class': 'form-field'}),
            'land_14': forms.Select(attrs={'class': 'form-field'}),
            'land_15': forms.Select(attrs={'class': 'form-field'}),
            'notes': forms.Textarea(attrs={'class': 'form-field', 'rows': 10}),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)  # Extract the 'user' argument from kwargs
        super().__init__(*args, **kwargs)
        
        if user:
            profile = user.instructor_profile
            self.fields['instructor_id'].initial = user.national_id
            self.fields['instructor_first_name'].initial = user.first_name
            self.fields['instructor_last_name'].initial = user.last_name
            self.fields['instructor_license_type'].initial = profile.instructor_license_type
            self.fields['instructor_license_number'].initial = user.national_id

    def save(self, commit=True):
        """Override the save method to copy user_id to user_license_number and create FlightLog."""
        instance = super().save(commit=False)  # Don't save yet, so we can modify the instance
        instance.student_license_number = instance.student_id  # Copy value from user_id
        
        # Create and save a FlightLog instance
        flightlog_instance = FlightLog(
            student_id=self.cleaned_data.get('student_id'),
            student_first_name=self.cleaned_data.get('student_first_name'),
            student_last_name=self.cleaned_data.get('student_last_name'),
            course_type=self.cleaned_data.get('course_type'),
            instructor_id=self.cleaned_data.get('instructor_id'),
            instructor_first_name=self.cleaned_data.get('instructor_first_name'),
            instructor_last_name=self.cleaned_data.get('instructor_last_name'),
            flight_rules=self.cleaned_data.get('flight_rules'),
            solo_flight=self.cleaned_data.get('solo_flight'),
            session_number=self.cleaned_data.get('session_number'),
            session_letter=self.cleaned_data.get('session_letter'),
            accumulated_flight_hours=self.cleaned_data.get('accumulated_flight_hours'),
            session_flight_hours=self.cleaned_data.get('session_flight_hours'),
            aircraft_registration=self.cleaned_data.get('aircraft_registration'),
            session_grade=self.cleaned_data.get('session_grade'),
            notes=self.cleaned_data.get('notes', '')
        )
         
        if commit:
            instance.save()
            flightlog_instance.save()

        return instance