# Generated by Django 5.2.3 on 2025-07-28 19:00

from django.db import migrations


def standardize_accounts_permissions(apps, schema_editor):
    """
    Standardize permission names for all accounts app models to follow consistent naming.
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the content types for all accounts models
    try:
        user_ct = ContentType.objects.get(
            app_label='accounts',
            model='user'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        studentprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='studentprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        instructorprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='instructorprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        staffprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='staffprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        studentpayment_ct = ContentType.objects.get(
            app_label='accounts',
            model='studentpayment'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    # Define all permission updates
    permission_updates = [
        # User permissions
        (user_ct, [
            ('add_user', 'Can add Usuario'),
            ('change_user', 'Can change Usuario'),
            ('delete_user', 'Can delete Usuario'),
            ('view_user', 'Can view Usuario'),
        ]),
        
        # StudentProfile permissions
        (studentprofile_ct, [
            ('add_studentprofile', 'Can add Estudiante'),
            ('change_studentprofile', 'Can change Estudiante'),
            ('delete_studentprofile', 'Can delete Estudiante'),
            ('view_studentprofile', 'Can view Estudiante'),
        ]),
        
        # InstructorProfile permissions
        (instructorprofile_ct, [
            ('add_instructorprofile', 'Can add Instructor'),
            ('change_instructorprofile', 'Can change Instructor'),
            ('delete_instructorprofile', 'Can delete Instructor'),
            ('view_instructorprofile', 'Can view Instructor'),
        ]),
        
        # StaffProfile permissions
        (staffprofile_ct, [
            ('add_staffprofile', 'Can add Staff'),
            ('change_staffprofile', 'Can change Staff'),
            ('delete_staffprofile', 'Can delete Staff'),
            ('view_staffprofile', 'Can view Staff'),
        ]),
        
        # StudentPayment permissions
        (studentpayment_ct, [
            ('add_studentpayment', 'Can add Pago de Estudiante'),
            ('change_studentpayment', 'Can change Pago de Estudiante'),
            ('delete_studentpayment', 'Can delete Pago de Estudiante'),
            ('view_studentpayment', 'Can view Pago de Estudiante'),
        ]),
    ]
    
    # Update all permissions
    for content_type, permissions in permission_updates:
        for codename, name in permissions:
            try:
                permission = Permission.objects.get(
                    content_type=content_type,
                    codename=codename
                )
                permission.name = name
                permission.save()
            except Permission.DoesNotExist:
                # Permission doesn't exist, skip it
                pass


def reverse_standardize_accounts_permissions(apps, schema_editor):
    """
    Reverse the permission name updates.
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the content types for all accounts models
    try:
        user_ct = ContentType.objects.get(
            app_label='accounts',
            model='user'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        studentprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='studentprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        instructorprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='instructorprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        staffprofile_ct = ContentType.objects.get(
            app_label='accounts',
            model='staffprofile'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    try:
        studentpayment_ct = ContentType.objects.get(
            app_label='accounts',
            model='studentpayment'
        )
    except ContentType.DoesNotExist:
        return  # Skip if model doesn't exist
    
    # Define all permission reversions
    permission_reversions = [
        # User permissions
        (user_ct, [
            ('add_user', 'Can add user'),
            ('change_user', 'Can change user'),
            ('delete_user', 'Can delete user'),
            ('view_user', 'Can view user'),
        ]),
        
        # StudentProfile permissions
        (studentprofile_ct, [
            ('add_studentprofile', 'Can add student profile'),
            ('change_studentprofile', 'Can change student profile'),
            ('delete_studentprofile', 'Can delete student profile'),
            ('view_studentprofile', 'Can view student profile'),
        ]),
        
        # InstructorProfile permissions
        (instructorprofile_ct, [
            ('add_instructorprofile', 'Can add instructor profile'),
            ('change_instructorprofile', 'Can change instructor profile'),
            ('delete_instructorprofile', 'Can delete instructor profile'),
            ('view_instructorprofile', 'Can view instructor profile'),
        ]),
        
        # StaffProfile permissions
        (staffprofile_ct, [
            ('add_staffprofile', 'Can add staff profile'),
            ('change_staffprofile', 'Can change staff profile'),
            ('delete_staffprofile', 'Can delete staff profile'),
            ('view_staffprofile', 'Can view staff profile'),
        ]),
        
        # StudentPayment permissions
        (studentpayment_ct, [
            ('add_studentpayment', 'Can add student payment'),
            ('change_studentpayment', 'Can change student payment'),
            ('delete_studentpayment', 'Can delete student payment'),
            ('view_studentpayment', 'Can view student payment'),
        ]),
    ]
    
    # Revert all permissions
    for content_type, permissions in permission_reversions:
        for codename, name in permissions:
            try:
                permission = Permission.objects.get(
                    content_type=content_type,
                    codename=codename
                )
                permission.name = name
                permission.save()
            except Permission.DoesNotExist:
                # Permission doesn't exist, skip it
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0019_alter_user_email_alter_user_username'),
        ('auth', '__latest__'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(
            standardize_accounts_permissions,
            reverse_standardize_accounts_permissions
        ),
    ]
