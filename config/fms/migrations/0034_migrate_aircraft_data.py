# Generated by Django 5.2.3 on 2025-08-01 14:45

from django.db import migrations


def migrate_aircraft_data(apps, schema_editor):
    """
    Migrate aircraft data from CharField to ForeignKey
    """
    FlightEvaluation0_100 = apps.get_model('fms', 'FlightEvaluation0_100')
    FlightEvaluation100_120 = apps.get_model('fms', 'FlightEvaluation100_120')
    FlightEvaluation120_170 = apps.get_model('fms', 'FlightEvaluation120_170')
    Aircraft = apps.get_model('fleet', 'Aircraft')
    
    # Ensure Aircraft records exist for the known registrations
    yv204e_aircraft, created = Aircraft.objects.get_or_create(
        registration='YV204E',
        defaults={
            'manufacturer': 'Piper',
            'model': 'PA-28-161',
            'serial_number': '28-7916091',
            'year_manufactured': 1979,
            'is_active': True,
            'is_available': True,
            'maintenance_status': 'OPERATIONAL',
            'total_hours': 0.0,
            'max_daily_slots': 3,
            'hourly_rate': 130.0,
        }
    )
    
    yv206e_aircraft, created = Aircraft.objects.get_or_create(
        registration='YV206E',
        defaults={
            'manufacturer': 'Piper',
            'model': 'PA-28-235',
            'serial_number': '28-11162',
            'year_manufactured': 1967,
            'is_active': True,
            'is_available': True,
            'maintenance_status': 'OPERATIONAL',
            'total_hours': 0.0,
            'max_daily_slots': 3,
            'hourly_rate': 130.0,
        }
    )
    
    # Migrate FlightEvaluation0_100 records
    for evaluation in FlightEvaluation0_100.objects.all():
        if evaluation.aircraft_registration == 'YV204E':
            evaluation.aircraft_new = yv204e_aircraft
        elif evaluation.aircraft_registration == 'YV206E':
            evaluation.aircraft_new = yv206e_aircraft
        evaluation.save()
    
    # Migrate FlightEvaluation100_120 records
    for evaluation in FlightEvaluation100_120.objects.all():
        if evaluation.aircraft_registration == 'YV204E':
            evaluation.aircraft_new = yv204e_aircraft
        elif evaluation.aircraft_registration == 'YV206E':
            evaluation.aircraft_new = yv206e_aircraft
        evaluation.save()
    
    # Migrate FlightEvaluation120_170 records
    for evaluation in FlightEvaluation120_170.objects.all():
        if evaluation.aircraft_registration == 'YV204E':
            evaluation.aircraft_new = yv204e_aircraft
        elif evaluation.aircraft_registration == 'YV206E':
            evaluation.aircraft_new = yv206e_aircraft
        evaluation.save()


def reverse_migrate_aircraft_data(apps, schema_editor):
    """
    Reverse migration - set aircraft_new to None
    """
    FlightEvaluation0_100 = apps.get_model('fms', 'FlightEvaluation0_100')
    FlightEvaluation100_120 = apps.get_model('fms', 'FlightEvaluation100_120')
    FlightEvaluation120_170 = apps.get_model('fms', 'FlightEvaluation120_170')
    
    # Set aircraft_new to None for all records
    FlightEvaluation0_100.objects.update(aircraft_new=None)
    FlightEvaluation100_120.objects.update(aircraft_new=None)
    FlightEvaluation120_170.objects.update(aircraft_new=None)


class Migration(migrations.Migration):

    dependencies = [
        ('fleet', '0006_remove_simulator_hourly_rate_and_more'),
        ('fms', '0033_add_aircraft_new_fields'),
    ]

    operations = [
        migrations.RunPython(
            migrate_aircraft_data,
            reverse_migrate_aircraft_data,
        ),
    ]
