# Generated by Django 5.2.3 on 2025-07-28 19:00

from django.db import migrations


def standardize_academic_permissions(apps, schema_editor):
    """
    Standardize permission names for all academic app models to follow consistent naming.
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the content types for all academic models
    coursetype_ct = ContentType.objects.get(
        app_label='academic',
        model='coursetype'
    )
    
    courseedition_ct = ContentType.objects.get(
        app_label='academic',
        model='courseedition'
    )
    
    subjecttype_ct = ContentType.objects.get(
        app_label='academic',
        model='subjecttype'
    )
    
    subjectedition_ct = ContentType.objects.get(
        app_label='academic',
        model='subjectedition'
    )
    
    studentgrade_ct = ContentType.objects.get(
        app_label='academic',
        model='studentgrade'
    )
    
    # Define all permission updates
    permission_updates = [
        # CourseType permissions
        (coursetype_ct, [
            ('add_coursetype', 'Can add Curso'),
            ('change_coursetype', 'Can change Curso'),
            ('delete_coursetype', 'Can delete Curso'),
            ('view_coursetype', 'Can view Curso'),
        ]),
        
        # CourseEdition permissions
        (courseedition_ct, [
            ('add_courseedition', 'Can add Edición de Curso'),
            ('change_courseedition', 'Can change Edición de Curso'),
            ('delete_courseedition', 'Can delete Edición de Curso'),
            ('view_courseedition', 'Can view Edición de Curso'),
        ]),
        
        # SubjectType permissions
        (subjecttype_ct, [
            ('add_subjecttype', 'Can add Materia'),
            ('change_subjecttype', 'Can change Materia'),
            ('delete_subjecttype', 'Can delete Materia'),
            ('view_subjecttype', 'Can view Materia'),
        ]),
        
        # SubjectEdition permissions
        (subjectedition_ct, [
            ('add_subjectedition', 'Can add Edición de Materia'),
            ('change_subjectedition', 'Can change Edición de Materia'),
            ('delete_subjectedition', 'Can delete Edición de Materia'),
            ('view_subjectedition', 'Can view Edición de Materia'),
        ]),
        
        # StudentGrade permissions
        (studentgrade_ct, [
            ('add_studentgrade', 'Can add Nota de Estudiante'),
            ('change_studentgrade', 'Can change Nota de Estudiante'),
            ('delete_studentgrade', 'Can delete Nota de Estudiante'),
            ('view_studentgrade', 'Can view Nota de Estudiante'),
        ]),
    ]
    
    # Update all permissions
    for content_type, permissions in permission_updates:
        for codename, name in permissions:
            try:
                permission = Permission.objects.get(
                    content_type=content_type,
                    codename=codename
                )
                permission.name = name
                permission.save()
            except Permission.DoesNotExist:
                # Permission doesn't exist, skip it
                pass


def reverse_standardize_academic_permissions(apps, schema_editor):
    """
    Reverse the permission name updates.
    """
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the content types for all academic models
    coursetype_ct = ContentType.objects.get(
        app_label='academic',
        model='coursetype'
    )
    
    courseedition_ct = ContentType.objects.get(
        app_label='academic',
        model='courseedition'
    )
    
    subjecttype_ct = ContentType.objects.get(
        app_label='academic',
        model='subjecttype'
    )
    
    subjectedition_ct = ContentType.objects.get(
        app_label='academic',
        model='subjectedition'
    )
    
    studentgrade_ct = ContentType.objects.get(
        app_label='academic',
        model='studentgrade'
    )
    
    # Define all permission reversions
    permission_reversions = [
        # CourseType permissions
        (coursetype_ct, [
            ('add_coursetype', 'Can add Course Type'),
            ('change_coursetype', 'Can change Course Type'),
            ('delete_coursetype', 'Can delete Course Type'),
            ('view_coursetype', 'Can view Course Type'),
        ]),
        
        # CourseEdition permissions
        (courseedition_ct, [
            ('add_courseedition', 'Can add course edition'),
            ('change_courseedition', 'Can change course edition'),
            ('delete_courseedition', 'Can delete course edition'),
            ('view_courseedition', 'Can view course edition'),
        ]),
        
        # SubjectType permissions
        (subjecttype_ct, [
            ('add_subjecttype', 'Can add subject type'),
            ('change_subjecttype', 'Can change subject type'),
            ('delete_subjecttype', 'Can delete subject type'),
            ('view_subjecttype', 'Can view subject type'),
        ]),
        
        # SubjectEdition permissions
        (subjectedition_ct, [
            ('add_subjectedition', 'Can add subject edition'),
            ('change_subjectedition', 'Can change subject edition'),
            ('delete_subjectedition', 'Can delete subject edition'),
            ('view_subjectedition', 'Can view subject edition'),
        ]),
        
        # StudentGrade permissions
        (studentgrade_ct, [
            ('add_studentgrade', 'Can add student grade'),
            ('change_studentgrade', 'Can change student grade'),
            ('delete_studentgrade', 'Can delete student grade'),
            ('view_studentgrade', 'Can view student grade'),
        ]),
    ]
    
    # Revert all permissions
    for content_type, permissions in permission_reversions:
        for codename, name in permissions:
            try:
                permission = Permission.objects.get(
                    content_type=content_type,
                    codename=codename
                )
                permission.name = name
                permission.save()
            except Permission.DoesNotExist:
                # Permission doesn't exist, skip it
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0026_alter_courseedition_edition_and_more'),
        ('auth', '__latest__'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(
            standardize_academic_permissions,
            reverse_standardize_academic_permissions
        ),
    ]
